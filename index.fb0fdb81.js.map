{"mappings":"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":["src/JS/classSelect.js","src/JS/select.js"],"sourcesContent":["export class ItcCustomSelect {\n    static EL = 'itc-select';\n    static EL_SHOW = 'itc-select_show';\n    static EL_OPTION = 'itc-select__option';\n    static EL_OPTION_SELECTED = 'itc-select__option_selected';\n    static DATA = '[data-select]';\n    static DATA_TOGGLE = '[data-select=\"toggle\"]';\n  \n    static template(params) {\n      const { name, options, targetValue } = params;\n      const items = [];\n      let selectedIndex = -1;\n      let selectedValue = '';\n      let selectedContent = 'Выберите из списка';\n      options.forEach((option, index) => {\n        let selectedClass = '';\n        if (option[0] === targetValue) {\n          selectedClass = ` ${this.EL_OPTION_SELECTED}`;\n          selectedIndex = index;\n          selectedValue = option[0];\n          selectedContent = option[1];\n        }\n        items.push(`<li class=\"itc-select__option${selectedClass}\" data-select=\"option\"\n          data-value=\"${option[0]}\" data-index=\"${index}\">${option[1]}</li>`);\n      });\n      return `<button type=\"button\" class=\"itc-select__toggle\" name=\"${name}\"\n        value=\"${selectedValue}\" data-select=\"toggle\" data-index=\"${selectedIndex}\">\n        ${selectedContent}</button><div class=\"itc-select__dropdown\">\n        <ul class=\"itc-select__options\">${items.join('')}</ul></div>`;\n    }\n  \n    static hideOpenSelect() {\n      document.addEventListener('click', (e) => {\n        if (!e.target.closest(`.${this.EL}`)) {\n          const elsActive = document.querySelectorAll(`.${this.EL_SHOW}`);\n          elsActive.forEach((el) => {\n            el.classList.remove(this.EL_SHOW);\n          });\n        }\n      });\n    }\n    static create(target, params) {\n      this._el = typeof target === 'string' ? document.querySelector(target) : target;\n      if (this._el) {\n        return new this(target, params);\n      }\n      return null;\n    }\n    constructor(target, params) {\n      this._el = typeof target === 'string' ? document.querySelector(target) : target;\n      this._params = params || {};\n      this._onClickFn = this._onClick.bind(this);\n      if (this._params.options) {\n        this._el.innerHTML = this.constructor.template(this._params);\n        this._el.classList.add(this.constructor.EL);\n      }\n      this._elToggle = this._el.querySelector(this.constructor.DATA_TOGGLE);\n      this._el.addEventListener('click', this._onClickFn);\n    }\n  \n    _onClick(e) {\n      const { target } = e;\n      const type = target.closest(this.constructor.DATA).dataset.select;\n      if (type === 'toggle') {\n        this.toggle();\n      } else if (type === 'option') {\n        this._changeValue(target);\n      }\n    }\n  \n    _updateOption(el) {\n      const elOption = el.closest(`.${this.constructor.EL_OPTION}`);\n      const elOptionSel = this._el.querySelector(`.${this.constructor.EL_OPTION_SELECTED}`);\n      if (elOptionSel) {\n        elOptionSel.classList.remove(this.constructor.EL_OPTION_SELECTED);\n      }\n      elOption.classList.add(this.constructor.EL_OPTION_SELECTED);\n      this._elToggle.textContent = elOption.textContent;\n      this._elToggle.value = elOption.dataset.value;\n      this._elToggle.dataset.index = elOption.dataset.index;\n      this._el.dispatchEvent(new CustomEvent('itc.select.change'));\n      this._params.onSelected ? this._params.onSelected(this, elOption) : null;\n      return elOption.dataset.value;\n    }\n  \n    _reset() {\n      const selected = this._el.querySelector(`.${this.constructor.EL_OPTION_SELECTED}`);\n      if (selected) {\n        selected.classList.remove(this.constructor.EL_OPTION_SELECTED);\n      }\n      this._elToggle.textContent = 'Выберите из списка';\n      this._elToggle.value = '';\n      this._elToggle.dataset.index = '-1';\n      this._el.dispatchEvent(new CustomEvent('itc.select.change'));\n      this._params.onSelected ? this._params.onSelected(this, null) : null;\n      return '';\n    }\n  \n    _changeValue(el) {\n      if (el.classList.contains(this.constructor.EL_OPTION_SELECTED)) {\n        return;\n      }\n      this._updateOption(el);\n      this.hide();\n    }\n  \n    show() {\n      document.querySelectorAll(this.constructor.EL_SHOW)\n        .forEach((el) => {\n          el.classList.remove(this.constructor.EL_SHOW);\n        });\n      this._el.classList.add(`${this.constructor.EL_SHOW}`);\n    }\n  \n    hide() {\n      this._el.classList.remove(this.constructor.EL_SHOW);\n    }\n  \n    toggle() {\n      this._el.classList.contains(this.constructor.EL_SHOW) ? this.hide() : this.show();\n    }\n  \n    dispose() {\n      this._el.removeEventListener('click', this._onClickFn);\n    }\n  \n    get value() {\n      return this._elToggle.value;\n    }\n  \n    set value(value) {\n      let isExists = false;\n      this._el.querySelectorAll('.select__option')\n        .forEach((option) => {\n          if (option.dataset.value === value) {\n            isExists = true;\n            this._updateOption(option);\n          }\n        });\n      if (!isExists) {\n        this._reset();\n      }\n    }\n  \n    get selectedIndex() {\n      return this._elToggle.dataset.index;\n    }\n  \n    set selectedIndex(index) {\n      const option = this._el.querySelector(`.select__option[data-index=\"${index}\"]`);\n      if (option) {\n        this._updateOption(option);\n      }\n      this._reset();\n    }\n  }\n  \n  ItcCustomSelect.hideOpenSelect();","import {ItcCustomSelect} from './classSelect';\nconst select2 = new ItcCustomSelect('#select-2', {\n    name: 'key', // значение атрибута name у кнопки\n    targetValue: 'a', // значение по умолчанию\n    options: [['a', 'A'],['b', 'B'],['c', 'C'],['d', 'D'],['e', 'E'],['f', 'F'],['g', 'G'],['h', 'H'],['i', 'I'],['j', 'J'],['k', 'K'],['l', 'L'],['m', 'M'],['n', 'N'],['o', 'O'],['p', 'P'],['q', 'Q'],['r', 'R'],['s', 'S'],['t', 'T'],['u', 'U'],['v', 'V'],['w', 'W'],['x', 'X'],['y', 'Y'],['z', 'Z'],['0', '0'],['1', '1'],['2', '2'],['3', '3'],['4', '4'],['5', '5'],['6', '6'],['7', '7'],['8', '8'],['9', '9']],\n  });\n\n\n"],"names":["$8MBJY","parcelRequire","$a96f6d4c66c402f3$export$441e911a3f8604f1","ItcCustomSelect","target","params","this","_el","document","querySelector","_params","_onClickFn","_onClick","bind","options","innerHTML","constructor","template","classList","add","EL","_elToggle","DATA_TOGGLE","addEventListener","key","e","type","closest","DATA","dataset","select","toggle","_changeValue","el","elOption","concat","EL_OPTION","elOptionSel","EL_OPTION_SELECTED","remove","textContent","value","index","dispatchEvent","CustomEvent","onSelected","selected","contains","_updateOption","hide","querySelectorAll","EL_SHOW","forEach","_this","show","removeEventListener","isExists","option","_reset","name","targetValue","items","selectedIndex","selectedValue","selectedContent","selectedClass","push","join","_this1","$parcel$interopDefault","$hKHmD","hideOpenSelect"],"version":3,"file":"index.fb0fdb81.js.map"}