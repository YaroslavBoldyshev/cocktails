{"mappings":"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":["src/JS/classSelect.js","src/JS/select.js"],"sourcesContent":["export class ItcCustomSelect {\n    static EL = 'itc-select';\n    static EL_SHOW = 'itc-select_show';\n    static EL_OPTION = 'itc-select__option';\n    static EL_OPTION_SELECTED = 'itc-select__option_selected';\n    static DATA = '[data-select]';\n    static DATA_TOGGLE = '[data-select=\"toggle\"]';\n  \n    static template(params) {\n      const { name, options, targetValue } = params;\n      const items = [];\n      let selectedIndex = -1;\n      let selectedValue = '';\n      let selectedContent = 'Выберите из списка';\n      options.forEach((option, index) => {\n        let selectedClass = '';\n        if (option[0] === targetValue) {\n          selectedClass = ` ${this.EL_OPTION_SELECTED}`;\n          selectedIndex = index;\n          selectedValue = option[0];\n          selectedContent = option[1];\n        }\n        items.push(`<li class=\"itc-select__option${selectedClass}\" data-select=\"option\"\n          data-value=\"${option[0]}\" data-index=\"${index}\">${option[1]}</li>`);\n      });\n      return `<button type=\"button\" class=\"itc-select__toggle\" name=\"${name}\"\n        value=\"${selectedValue}\" data-select=\"toggle\" data-index=\"${selectedIndex}\">\n        ${selectedContent}</button><div class=\"itc-select__dropdown\">\n        <ul class=\"itc-select__options\">${items.join('')}</ul></div>`;\n    }\n  \n    static hideOpenSelect() {\n      document.addEventListener('click', (e) => {\n        if (!e.target.closest(`.${this.EL}`)) {\n          const elsActive = document.querySelectorAll(`.${this.EL_SHOW}`);\n          elsActive.forEach((el) => {\n            el.classList.remove(this.EL_SHOW);\n          });\n        }\n      });\n    }\n    static create(target, params) {\n      this._el = typeof target === 'string' ? document.querySelector(target) : target;\n      if (this._el) {\n        return new this(target, params);\n      }\n      return null;\n    }\n    constructor(target, params) {\n      this._el = typeof target === 'string' ? document.querySelector(target) : target;\n      this._params = params || {};\n      this._onClickFn = this._onClick.bind(this);\n      if (this._params.options) {\n        this._el.innerHTML = this.constructor.template(this._params);\n        this._el.classList.add(this.constructor.EL);\n      }\n      this._elToggle = this._el.querySelector(this.constructor.DATA_TOGGLE);\n      this._el.addEventListener('click', this._onClickFn);\n    }\n  \n    _onClick(e) {\n      const { target } = e;\n      const type = target.closest(this.constructor.DATA).dataset.select;\n      if (type === 'toggle') {\n        this.toggle();\n      } else if (type === 'option') {\n        this._changeValue(target);\n      }\n    }\n  \n    _updateOption(el) {\n      const elOption = el.closest(`.${this.constructor.EL_OPTION}`);\n      const elOptionSel = this._el.querySelector(`.${this.constructor.EL_OPTION_SELECTED}`);\n      if (elOptionSel) {\n        elOptionSel.classList.remove(this.constructor.EL_OPTION_SELECTED);\n      }\n      elOption.classList.add(this.constructor.EL_OPTION_SELECTED);\n      this._elToggle.textContent = elOption.textContent;\n      this._elToggle.value = elOption.dataset.value;\n      this._elToggle.dataset.index = elOption.dataset.index;\n      this._el.dispatchEvent(new CustomEvent('itc.select.change'));\n      this._params.onSelected ? this._params.onSelected(this, elOption) : null;\n      return elOption.dataset.value;\n    }\n  \n    _reset() {\n      const selected = this._el.querySelector(`.${this.constructor.EL_OPTION_SELECTED}`);\n      if (selected) {\n        selected.classList.remove(this.constructor.EL_OPTION_SELECTED);\n      }\n      this._elToggle.textContent = 'Выберите из списка';\n      this._elToggle.value = '';\n      this._elToggle.dataset.index = '-1';\n      this._el.dispatchEvent(new CustomEvent('itc.select.change'));\n      this._params.onSelected ? this._params.onSelected(this, null) : null;\n      return '';\n    }\n  \n    _changeValue(el) {\n      if (el.classList.contains(this.constructor.EL_OPTION_SELECTED)) {\n        return;\n      }\n      this._updateOption(el);\n      this.hide();\n    }\n  \n    show() {\n      document.querySelectorAll(this.constructor.EL_SHOW)\n        .forEach((el) => {\n          el.classList.remove(this.constructor.EL_SHOW);\n        });\n      this._el.classList.add(`${this.constructor.EL_SHOW}`);\n    }\n  \n    hide() {\n      this._el.classList.remove(this.constructor.EL_SHOW);\n    }\n  \n    toggle() {\n      this._el.classList.contains(this.constructor.EL_SHOW) ? this.hide() : this.show();\n    }\n  \n    dispose() {\n      this._el.removeEventListener('click', this._onClickFn);\n    }\n  \n    get value() {\n      return this._elToggle.value;\n    }\n  \n    set value(value) {\n      let isExists = false;\n      this._el.querySelectorAll('.select__option')\n        .forEach((option) => {\n          if (option.dataset.value === value) {\n            isExists = true;\n            this._updateOption(option);\n          }\n        });\n      if (!isExists) {\n        this._reset();\n      }\n    }\n  \n    get selectedIndex() {\n      return this._elToggle.dataset.index;\n    }\n  \n    set selectedIndex(index) {\n      const option = this._el.querySelector(`.select__option[data-index=\"${index}\"]`);\n      if (option) {\n        this._updateOption(option);\n      }\n      this._reset();\n    }\n  }\n  \n  ItcCustomSelect.hideOpenSelect();","import {ItcCustomSelect} from './classSelect';\nconst select2 = new ItcCustomSelect('#select-2', {\n    name: 'key', // значение атрибута name у кнопки\n    targetValue: 'a', // значение по умолчанию\n    options: [['a', 'A'],['b', 'B'],['c', 'C'],['d', 'D'],['e', 'E'],['f', 'F'],['g', 'G'],['h', 'H'],['i', 'I'],['j', 'J'],['k', 'K'],['l', 'L'],['m', 'M'],['n', 'N'],['o', 'O'],['p', 'P'],['q', 'Q'],['r', 'R'],['s', 'S'],['t', 'T'],['u', 'U'],['v', 'V'],['w', 'W'],['x', 'X'],['y', 'Y'],['z', 'Z'],['0', '0'],['1', '1'],['2', '2'],['3', '3'],['4', '4'],['5', '5'],['6', '6'],['7', '7'],['8', '8'],['9', '9']],\n  });\n\n\n"],"names":["$iJYdK","parcelRequire","$0cf76f4f2d28fa85$export$441e911a3f8604f1","static","params","name","options","targetValue","items","selectedIndex","selectedValue","selectedContent","forEach","option","index","selectedClass","this","EL_OPTION_SELECTED","push","join","document","addEventListener","e","target","closest","EL","querySelectorAll","EL_SHOW","el","classList","remove","_el","querySelector","_onClick","type","constructor","DATA","dataset","select","toggle","_changeValue","_updateOption","elOption","EL_OPTION","elOptionSel","add","_elToggle","textContent","value","dispatchEvent","CustomEvent","_params","onSelected","_reset","selected","contains","hide","show","dispose","removeEventListener","_onClickFn","isExists","bind","innerHTML","template","DATA_TOGGLE","$parcel$interopDefault","hideOpenSelect"],"version":3,"file":"index.f6f8bd5c.js.map"}